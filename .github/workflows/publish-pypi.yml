name: Publish Python package

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "**"

jobs:
  build:
    name: Build package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Setup environment
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Build a binary wheel and a source tarball
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get current branch
        id: check_step
        # 1. Get the list of branches ref where this tag exists
        # 2. Remove 'origin/' from that result
        # 3. Put that string in output
        # => We can now use function 'contains(list, item)''
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."

  publish-to-pypi:
    name: Publish Python package to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') and contains(${{ needs.prepare-release.outputs.branch }}, 'main')`
    needs:
      - build
      - prepare-release
    permissions:
      id-token: write
    env:
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      PYPI_URL: ${{ vars.PYPI_URL }}
    environment:
      name: Development
      url: ${{ env.PYPI_URL }}/p/backup-me
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ env.PYPI_URL }}/legacy/
          verbose: false

  # github-release:
  #   name: >-
  #     Sign the Python package with Sigstore
  #     and upload them to GitHub Release
  #   needs:
  #     - publish-to-pypi
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write
  #     id-token: write

  #   steps:
  #     - name: Download all the dists
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: python-package-distributions
  #         path: dist/
  #     - name: Sign the dists with Sigstore
  #       uses: sigstore/gh-action-sigstore-python@v2.1.1
  #       with:
  #         inputs: >-
  #           ./dist/*.tar.gz
  #           ./dist/*.whl
  #     - name: Create GitHub Release
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: >-
  #         gh release create
  #         '${{ github.ref_name }}'
  #         --repo '${{ github.repository }}'
  #         --notes ""
  #     - name: Upload artifact signatures to GitHub Release
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       # Upload to GitHub Release using the `gh` CLI.
  #       # `dist/` contains the built packages, and the
  #       # sigstore-produced signatures and certificates.
  #       run: >-
  #         gh release upload
  #         '${{ github.ref_name }}' dist/**
  #         --repo '${{ github.repository }}'
